// Mocks generated by Mockito 5.4.5 from annotations
// in sipcot/test/view/admin/admin_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i6;
import 'dart:ui' as _i8;

import 'package:google_maps_flutter/google_maps_flutter.dart' as _i4;
import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart'
    as _i2;
import 'package:logger/src/logger.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sipcot/viewModel/auth_view_model.dart' as _i9;
import 'package:sipcot/viewModel/map_vm.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLatLngBounds_0 extends _i1.SmartFake implements _i2.LatLngBounds {
  _FakeLatLngBounds_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeScreenCoordinate_1 extends _i1.SmartFake
    implements _i2.ScreenCoordinate {
  _FakeScreenCoordinate_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLatLng_2 extends _i1.SmartFake implements _i2.LatLng {
  _FakeLatLng_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLogger_3 extends _i1.SmartFake implements _i3.Logger {
  _FakeLogger_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GoogleMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleMapController extends _i1.Mock
    implements _i4.GoogleMapController {
  MockGoogleMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get mapId =>
      (super.noSuchMethod(Invocation.getter(#mapId), returnValue: 0) as int);

  @override
  _i5.Future<void> clearTileCache(_i2.TileOverlayId? tileOverlayId) =>
      (super.noSuchMethod(
            Invocation.method(#clearTileCache, [tileOverlayId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> animateCamera(_i2.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(
            Invocation.method(#animateCamera, [cameraUpdate]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> moveCamera(_i2.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(
            Invocation.method(#moveCamera, [cameraUpdate]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setMapStyle(String? mapStyle) =>
      (super.noSuchMethod(
            Invocation.method(#setMapStyle, [mapStyle]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getStyleError() =>
      (super.noSuchMethod(
            Invocation.method(#getStyleError, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<_i2.LatLngBounds> getVisibleRegion() =>
      (super.noSuchMethod(
            Invocation.method(#getVisibleRegion, []),
            returnValue: _i5.Future<_i2.LatLngBounds>.value(
              _FakeLatLngBounds_0(
                this,
                Invocation.method(#getVisibleRegion, []),
              ),
            ),
          )
          as _i5.Future<_i2.LatLngBounds>);

  @override
  _i5.Future<_i2.ScreenCoordinate> getScreenCoordinate(_i2.LatLng? latLng) =>
      (super.noSuchMethod(
            Invocation.method(#getScreenCoordinate, [latLng]),
            returnValue: _i5.Future<_i2.ScreenCoordinate>.value(
              _FakeScreenCoordinate_1(
                this,
                Invocation.method(#getScreenCoordinate, [latLng]),
              ),
            ),
          )
          as _i5.Future<_i2.ScreenCoordinate>);

  @override
  _i5.Future<_i2.LatLng> getLatLng(_i2.ScreenCoordinate? screenCoordinate) =>
      (super.noSuchMethod(
            Invocation.method(#getLatLng, [screenCoordinate]),
            returnValue: _i5.Future<_i2.LatLng>.value(
              _FakeLatLng_2(
                this,
                Invocation.method(#getLatLng, [screenCoordinate]),
              ),
            ),
          )
          as _i5.Future<_i2.LatLng>);

  @override
  _i5.Future<void> showMarkerInfoWindow(_i2.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#showMarkerInfoWindow, [markerId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> hideMarkerInfoWindow(_i2.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#hideMarkerInfoWindow, [markerId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> isMarkerInfoWindowShown(_i2.MarkerId? markerId) =>
      (super.noSuchMethod(
            Invocation.method(#isMarkerInfoWindowShown, [markerId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<double> getZoomLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getZoomLevel, []),
            returnValue: _i5.Future<double>.value(0.0),
          )
          as _i5.Future<double>);

  @override
  _i5.Future<_i6.Uint8List?> takeSnapshot() =>
      (super.noSuchMethod(
            Invocation.method(#takeSnapshot, []),
            returnValue: _i5.Future<_i6.Uint8List?>.value(),
          )
          as _i5.Future<_i6.Uint8List?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [MapViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapViewModel extends _i1.Mock implements _i7.MapViewModel {
  MockMapViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onNavigateToDetails(_i8.VoidCallback? _onNavigateToDetails) =>
      super.noSuchMethod(
        Invocation.setter(#onNavigateToDetails, _onNavigateToDetails),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_3(this, Invocation.getter(#log)),
          )
          as _i3.Logger);

  @override
  Set<_i2.Polygon> get polygons =>
      (super.noSuchMethod(
            Invocation.getter(#polygons),
            returnValue: <_i2.Polygon>{},
          )
          as Set<_i2.Polygon>);

  @override
  Set<_i2.Marker> get markers =>
      (super.noSuchMethod(
            Invocation.getter(#markers),
            returnValue: <_i2.Marker>{},
          )
          as Set<_i2.Marker>);

  @override
  Set<_i2.Marker> get cascadeMakers =>
      (super.noSuchMethod(
            Invocation.getter(#cascadeMakers),
            returnValue: <_i2.Marker>{},
          )
          as Set<_i2.Marker>);

  @override
  Set<_i2.Polygon> get polygonsSite =>
      (super.noSuchMethod(
            Invocation.getter(#polygonsSite),
            returnValue: <_i2.Polygon>{},
          )
          as Set<_i2.Polygon>);

  @override
  Set<_i2.Polygon> get newBoundaryPolygons =>
      (super.noSuchMethod(
            Invocation.getter(#newBoundaryPolygons),
            returnValue: <_i2.Polygon>{},
          )
          as Set<_i2.Polygon>);

  @override
  Set<_i2.Polygon> get cascadeBoundaryPolygons =>
      (super.noSuchMethod(
            Invocation.getter(#cascadeBoundaryPolygons),
            returnValue: <_i2.Polygon>{},
          )
          as Set<_i2.Polygon>);

  @override
  bool get showSiteBoundary =>
      (super.noSuchMethod(
            Invocation.getter(#showSiteBoundary),
            returnValue: false,
          )
          as bool);

  @override
  bool get isLoadingSiteBoundary =>
      (super.noSuchMethod(
            Invocation.getter(#isLoadingSiteBoundary),
            returnValue: false,
          )
          as bool);

  @override
  bool get showNewBoundary =>
      (super.noSuchMethod(
            Invocation.getter(#showNewBoundary),
            returnValue: false,
          )
          as bool);

  @override
  bool get showCascadeBoundary =>
      (super.noSuchMethod(
            Invocation.getter(#showCascadeBoundary),
            returnValue: false,
          )
          as bool);

  @override
  bool get isLoadingNewBoundary =>
      (super.noSuchMethod(
            Invocation.getter(#isLoadingNewBoundary),
            returnValue: false,
          )
          as bool);

  @override
  bool get isAnimating =>
      (super.noSuchMethod(Invocation.getter(#isAnimating), returnValue: false)
          as bool);

  @override
  Set<_i2.Marker> get addFieldPoint =>
      (super.noSuchMethod(
            Invocation.getter(#addFieldPoint),
            returnValue: <_i2.Marker>{},
          )
          as Set<_i2.Marker>);

  @override
  bool get showAddedFieldPoint =>
      (super.noSuchMethod(
            Invocation.getter(#showAddedFieldPoint),
            returnValue: false,
          )
          as bool);

  @override
  Set<_i2.Marker> get fieldPoints =>
      (super.noSuchMethod(
            Invocation.getter(#fieldPoints),
            returnValue: <_i2.Marker>{},
          )
          as Set<_i2.Marker>);

  @override
  bool get showFieldPoints =>
      (super.noSuchMethod(
            Invocation.getter(#showFieldPoints),
            returnValue: false,
          )
          as bool);

  @override
  Set<_i2.Marker> get fmb_marker =>
      (super.noSuchMethod(
            Invocation.getter(#fmb_marker),
            returnValue: <_i2.Marker>{},
          )
          as Set<_i2.Marker>);

  @override
  Set<_i2.Polygon> get fmbBoundaryPolygon =>
      (super.noSuchMethod(
            Invocation.getter(#fmbBoundaryPolygon),
            returnValue: <_i2.Polygon>{},
          )
          as Set<_i2.Polygon>);

  @override
  bool get showFmbBoundary =>
      (super.noSuchMethod(
            Invocation.getter(#showFmbBoundary),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void clearMap() => super.noSuchMethod(
    Invocation.method(#clearMap, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateMap(Set<_i2.Polygon>? polygons, Set<_i2.Marker>? markers) =>
      super.noSuchMethod(
        Invocation.method(#updateMap, [polygons, markers]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> fetchPolygonData() =>
      (super.noSuchMethod(
            Invocation.method(#fetchPolygonData, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> fetchFMBData(String? selectedDistrict) =>
      (super.noSuchMethod(
            Invocation.method(#fetchFMBData, [selectedDistrict]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> fetchCadastralData(String? selectedDistrict) =>
      (super.noSuchMethod(
            Invocation.method(#fetchCadastralData, [selectedDistrict]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addNewFieldPoint({
    required _i2.LatLng? location,
    required String? surveyNumber,
    String? additionalDetails,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addNewFieldPoint, [], {
              #location: location,
              #surveyNumber: surveyNumber,
              #additionalDetails: additionalDetails,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  List<dynamic> getSurveySuggestions() =>
      (super.noSuchMethod(
            Invocation.method(#getSurveySuggestions, []),
            returnValue: <dynamic>[],
          )
          as List<dynamic>);

  @override
  void toggleFieldPoints(bool? value) => super.noSuchMethod(
    Invocation.method(#toggleFieldPoints, [value]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleSiteBoundary(bool? value) => super.noSuchMethod(
    Invocation.method(#toggleSiteBoundary, [value]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleNewBoundary(bool? value) => super.noSuchMethod(
    Invocation.method(#toggleNewBoundary, [value]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleCascade(bool? value) => super.noSuchMethod(
    Invocation.method(#toggleCascade, [value]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleFMB(bool? value) => super.noSuchMethod(
    Invocation.method(#toggleFMB, [value]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleAnimation(bool? value) => super.noSuchMethod(
    Invocation.method(#toggleAnimation, [value]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> fetchNewBoundary() =>
      (super.noSuchMethod(
            Invocation.method(#fetchNewBoundary, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> fetchFieldPoints() =>
      (super.noSuchMethod(
            Invocation.method(#fetchFieldPoints, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> fetchSiteBoundary() =>
      (super.noSuchMethod(
            Invocation.method(#fetchSiteBoundary, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthViewModel extends _i1.Mock implements _i9.AuthViewModel {
  MockAuthViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> login(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
